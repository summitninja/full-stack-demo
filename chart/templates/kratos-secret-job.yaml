# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: kratos-secret-job
# spec:
#   template:
#     spec:
#       serviceAccountName: kratos-secret-reader-sa
#       containers:
#       - name: kubectl
#         image: bitnami/kubectl:latest
#         command: 
#         - "sh"
#         - "-c"
#         - | 
#           until kubectl get secret kratos.mypghost.credentials.postgresql.acid.zalan.do; do echo 'Waiting for secret'; sleep 2; done && \
#           PASSWORD=$(kubectl get secret backend.mypghost.credentials.postgresql.acid.zalan.do -o jsonpath='{.data.password}' | base64 --decode) && \
#           DSN=$(echo -n "postgres://kratos:$PASSWORD@{{ .Values.postgres.hostname }}:5432/kratos" | base64 ) && \
#           kubectl patch secret my-app-kratos -p "{\"data\":{\"DSN\":\"$DSN\"}}"
#         volumeMounts:
#         - name: tmp
#           mountPath: /tmp
#       restartPolicy: Never
#       volumes:
#       - name: tmp
#         emptyDir: {}
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: kratos-secret-reader
# rules:
# - apiGroups: [""]
#   resources: ["secrets"]
#   verbs: ["get", "watch", "list", "create", "patch"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: kratos-secret-reader-binding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: kratos-secret-reader
# subjects:
# - kind: ServiceAccount
#   name: kratos-secret-reader-sa
#   namespace: default
# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: kratos-secret-reader-sa
# ---
